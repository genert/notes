{"componentChunkName":"component---src-templates-doc-js","path":"/","result":{"data":{"doc":{"id":"3ef3dc22-ec1a-50f8-8790-5fc821388644","title":"Hello world","description":"Some description","excerpt":"Hello world Test Here is a footnote reference, \nanother, ,\nand optionally there are inline\nnotes.^ you can type them inline, which may beâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Hello world\",\n  \"description\": \"Some description\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"hello-world\"\n  }, \"Hello world\"), mdx(\"p\", null, \"Test\"), mdx(\"div\", {\n    \"className\": \"math\"\n  }, \"a^2 + b^2 = c^2\"), mdx(\"p\", null, \"Here is a footnote reference,\", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-1\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-1\",\n    \"className\": \"footnote-ref\"\n  }, \"1\")), \"\\nanother,\", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-longnote\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-longnote\",\n    \"className\": \"footnote-ref\"\n  }, \"longnote\")), \",\\nand optionally there are inline\\nnotes.^\", \"[you can type them inline, which may be easier, since you don\\u2019t\\nhave to pick an identifier and move down to type the note.]\"), mdx(\"p\", null, \"This paragraph won\\u2019t be part of the note, because it\\nisn\\u2019t indented.\"), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-1\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Here is the footnote.\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#fnref-1\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\"))), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-longnote\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Here\\u2019s one with multiple blocks.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Subsequent paragraphs are indented to show that they\\nbelong to the previous footnote.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"{ some.code }\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The whole paragraph can be indented, or just the first\\nline. In this way, multi-paragraph footnotes work like\\nmulti-paragraph list items.\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#fnref-longnote\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Hello world"}]}},"pageContext":{"id":"3ef3dc22-ec1a-50f8-8790-5fc821388644","slug":"/","previous":{"id":"c3840069-b479-5e32-bd9a-78c499699c52","slug":"/ruby"},"next":{"id":"5598ea8f-9570-5781-b493-a0be7dfce08b","slug":"/hello-world"}}},"staticQueryHashes":["2468095761"]}